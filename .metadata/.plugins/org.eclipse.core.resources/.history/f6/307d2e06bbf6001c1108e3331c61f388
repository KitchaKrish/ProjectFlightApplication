package com.admin.Repo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.admin.entity.AirLine;
import com.admin.entity.FlightDetails;
import com.admin.entity.Useraccount;
import com.admin.service.IAirLineRepostiory;
import com.admin.service.IFlightDetailsRepostiory;
import com.admin.service.IUseraccountRepostiory;

@SpringBootTest
public class AdminTestCheck {

	@Autowired
	private IUseraccountRepostiory useraccountRepostiory;
	
	
	@Autowired
	private IAirLineRepostiory airLineRepostiory;
	
	@Autowired
	private IFlightDetailsRepostiory iFlightDetailsRepostiory;
	

	@Test
	void loadUserPresent() {

		String name = "krishna@test.com";
		String firstName = "krishna@test.com";
		Useraccount useraccount = useraccountRepostiory.findByUserName(name);
		System.out.println(useraccount.getUserName());
		assertEquals(name, useraccount.getUserName());
		assertNotEquals("sdvsv", useraccount.getUserName());
	}

	
	
	@Test
	void airlineSavecheck() {
		AirLine airLine = new AirLine("TestAirline","1234",true,"TA");
		AirLine falseAirline = new AirLine("TestAirlinecv","1234",true,"TA");
		AirLine resuAirLine = airLineRepostiory.save(airLine);
		assertTrue(airLine.equals(resuAirLine));
		assertFalse(falseAirline.equals(resuAirLine));
	}
	
	
	
	@Test
	void saveFlightcheck() {
		FlightDetails details = new FlightDetails("TestFlight", "TTF", true, "Chennai", "Coimbatore", "Bangalore", "15:00", "18:00", "3:00", "AllDays", "Indico", 50l, "12000", 0l);
		FlightDetails falseFlight = new FlightDetails("TestFlightTFE", "TTF", true, "Chennai", "Coimbatore", "Bangalore", "15:00", "18:00", "3:00", "AllDays", "Indico", 50l, "12000", 0l);
		FlightDetails resuAirLine = iFlightDetailsRepostiory.save(details);
		assertTrue(details.equals(resuAirLine));
		assertFalse(falseFlight.equals(resuAirLine));
	
	}

	
	@Test
	void updateFlightcheck() {
		FlightDetails details = new FlightDetails(85l,"TestFlight", "TTF", true, "Chennai", "Coimbatore", "Bangalore", "15:00", "18:00", "3:00", "AllDays", "Indico", 50l, "12000", 0l);
		FlightDetails falseFlight = new FlightDetails(85l,"TestFlightTFE", "TTF", true, "Chennai", "Coimbatore", "Bangalore", "15:00", "18:00", "3:00", "AllDays", "Indico", 50l, "12000", 0l);
		FlightDetails resuAirLine = iFlightDetailsRepostiory.findById(85l).orElseThrow();
		System.out.println(resuAirLine.getAirlineName() +" " + details.getAirlineName());
		assertFalse(falseFlight.equals(resuAirLine));
		assertEquals(resuAirLine.getAirlineName(), details.getAirlineName());
		
	
	
	}
	
	
	@Test
	void updateairlinecheck() {
		
		
		
		
		
		AirLine airLine = new AirLine(98l,"TestAirline","1234",true,"TA");
		AirLine falseAirline = new AirLine("TestAirlinecv","1234",true,"TA");
		AirLine resuAirLine = airLineRepostiory.findById(98l).orElseThrow();
		assertTrue(airLine.equals(resuAirLine));
		assertFalse(falseAirline.equals(resuAirLine));
		
		assertFalse(falseAirline.equals(resuAirLine));
		assertEquals(resuAirLine.getAirlineName(), airLine.getAirlineName());
		assertEquals(resuAirLine.isAirlineActiveStatus(), airLine.isAirlineActiveStatus());
	
	}

	
	
	
	
	
}
